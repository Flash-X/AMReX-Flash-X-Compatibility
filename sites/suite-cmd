#!/usr/bin/env python3

import click


def removeBaseline(line, baseKey):
    try:
        baseIndex = line.split().index(baseKey)
    except:
        baseIndex = None

    if baseIndex is not None:
        line = " ".join(line.split()[:baseIndex]) + "\n"

    return line


def isValidLine(line):
    return line[0] != "#" and line[0] != "\n"


@click.group("suite-cmd")
def suite_cmd():
    pass


@suite_cmd.command("remove-benchmarks")
@click.argument("suitefile", required=True)
def remove_benchmarks(suitefile):

    with open(suitefile, "r") as sfile:
        origLines = sfile.readlines()

    newLines = []
    continuedLine = ""

    for index, line in enumerate(origLines):

        if index > 0:
            prevLine = origLines[index - 1]
            if prevLine[0] != "#" and prevLine[0] != "\n":
                if prevLine.split("#")[0].split("\\")[0] == prevLine:
                    continuedLine = ""
                else:
                    continuedLine = continuedLine + prevLine
            else:
                continuedLine = ""

        evalLine = continuedLine + line
        evalLine = evalLine.replace("\n", "").replace("\\", "")

        if line[0] != "#" and line[0] != "\n":
            if "Comparison" in evalLine:
                line = removeBaseline(line, "-cbase")
            if "Composite" in evalLine:
                line = removeBaseline(line, "-cbase")
                line = removeBaseline(line, "-rbase")

        newLines.append(line)

    if newLines != origLines:
        with open(suitefile, "w") as sfile:
            sfile.writelines(newLines)


@suite_cmd.command("add-cbase")
@click.argument("suitefile", required=True)
@click.argument("date", required=True)
def add_cbase(suitefile, date):

    with open(suitefile, "r") as sfile:
        origLines = sfile.readlines()

    newLines = []

    for index, line in enumerate(origLines):

        if line[0] != "#" and line[0] != "\n":
            if "Comparison" in line:
                if "-cbase" not in line:
                    line = line.strip("\n") + f" -cbase {date}\n"

            if "Composite" in line:
                if "-cbase" not in line:
                    line = line.strip("\n") + f" -cbase {date}\n"

        newLines.append(line)

    if newLines != origLines:
        with open(suitefile, "w") as sfile:
            sfile.writelines(newLines)


@suite_cmd.command("add-rbase")
@click.argument("suitefile", required=True)
@click.argument("date", required=True)
def rdd_cbase(suitefile, date):

    with open(suitefile, "r") as sfile:
        origLines = sfile.readlines()

    newLines = []

    for index, line in enumerate(origLines):

        if line[0] != "#" and line[0] != "\n":
            if "Composite" in line:
                if "-rbase" not in line:
                    if "-cbase" not in line:
                        raise ValueError("Cannot add rbase without cbase")
                    else:
                        line = line.strip("\n") + f" -rbase {date}\n"

        newLines.append(line)

    if newLines != origLines:
        with open(suitefile, "w") as sfile:
            sfile.writelines(newLines)


if __name__ == "__main__":
    suite_cmd()
